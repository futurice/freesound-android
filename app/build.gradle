apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'checkstyle'

apply from: 'app-config.gradle'

def STRING = "String"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true

        buildConfigField(STRING, "FREESOUND_API_URL", project.ext.freesound_api_url)
        buildConfigField(STRING, "FREESOUND_API_KEY", project.ext.freesound_api_key)
    }
    signingConfigs {
        release {
            try {
                // Define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties
                // (Only where you do release builds; do NOT commit those into version control.)
                storeFile file("example.keystore")
                storePassword KEYSTORE_PASSWORD
                keyAlias "client"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                //   logger.warning('NB: For release builds, you must define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file('lint.xml')
    }
}

task checkstyle(type: Checkstyle) {
    description 'Checks if the code is somewhat acceptable'
    configFile file('./checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files() // empty because unnecessary for checkstyle
}
dependencies {

    // Dagger 2
    apt 'com.squareup:javapoet:1.7.0'
    compile 'com.google.dagger:dagger:2.4'
    apt 'com.google.dagger:dagger-compiler:2.4'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.52-beta'
    testCompile 'org.assertj:assertj-core:1.7.1'

    compile 'io.reactivex:rxjava:1.1.7'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.jakewharton.rxrelay:rxrelay:1.1.0'

    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp:1.3.1'

    // Auto-Value
    provided 'com.google.auto.value:auto-value:1.2'
    apt 'com.google.auto.value:auto-value:1.2'

    // Auto-Value GSON
    apt 'com.ryanharter.auto.value:auto-value-gson:0.3.2-rc1'

    // Auto-Value Parcelable
    compile 'com.ryanharter.auto.value:auto-value-parcel-adapter:0.2.3-rc2'
    apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.3-rc2'

    // Optionals for Java 6/7
    compile 'com.github.tomaszpolanski:options:1.1.1'

    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:support-annotations:23.3.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:palette-v7:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'

    // Firebase
    compile 'com.google.firebase:firebase-core:9.0.2'
    compile 'com.google.firebase:firebase-crash:9.2.1'

    testCompile 'com.github.peter-tackage:assert-rx:0.9.4-beta'
}

apply plugin: 'com.google.gms.google-services'
