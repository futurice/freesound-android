/*
 * Copyright 2016 Futurice GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'checkstyle'

apply from: 'app-config.gradle'
apply from: 'proguard-config.gradle'

def STRING = "String"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.futurice.freesound"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        signingConfig signingConfigs.debug
        multiDexEnabled true

        buildConfigField(STRING, "FREESOUND_API_URL", freesound_api_url)
        buildConfigField(STRING, "FREESOUND_API_CLIENT_ID", freesound_api_client_id)
        buildConfigField(STRING, "FREESOUND_API_CLIENT_SECRET", freesound_api_client_secret)
    }
    signingConfigs {
        debug {
            storeFile file("keystore/debug.keystore")
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), releaseProguardFiles
            minifyEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file('./quality/lint.xml')
        abortOnError false
    }

}

task checkstyle(type: Checkstyle) {
    group 'verification'
    description 'Checks if the code adheres to the coding standards'
    configFile file('quality/checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files() // empty because unnecessary for checkstyle
}

ext {
    dependencyVersions = [
            androidSupportLibrary  : '25.1.1',
            javaPoet               : '1.7.0',
            dagger2                : '2.4',
            javaxAnnotation        : '10.0-b28',
            rxJava2                : '2.0.1',
            rxAndroid              : '2.0.1',
            ixJava                 : '1.0.0-RC5',
            okHttp                 : '3.6.0',
            picasso                : '2.5.2',
            retrofit2              : '2.2.0',
            retrofit2RxJava2Adapter: '1.0.0',
            retrofit2GsonConverter : '2.0.0',
            gson                   : '2.7',
            autoValue              : '1.3',
            autoValueGson          : '0.4.4',
            autoValueParcelable    : '0.2.5',
            autoFactory            : '1.0-beta3',
            options                : '1.2.4',
            exoplayer              : 'r2.1.1',
            butterknife            : '8.4.0',
            firebase               : '9.4.0',
            stetho                 : '1.4.2',
            chuck                  : '1.0.4',
            timber                 : '4.2.0',
            junit                  : '4.12',
            mockito                : '2.2.2',
            assertJ                : '1.7.1',
            leakCanary             : '1.5']
}

dependencies {

    // Android Support
    compile "com.android.support:support-v4:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:support-annotations:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:appcompat-v7:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:palette-v7:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:recyclerview-v7:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:cardview-v7:$dependencyVersions.androidSupportLibrary"
    compile "com.android.support:design:$dependencyVersions.androidSupportLibrary"

    // Dagger 2
    apt "com.squareup:javapoet:$dependencyVersions.javaPoet"
    compile "com.google.dagger:dagger:$dependencyVersions.dagger2"
    apt "com.google.dagger:dagger-compiler:$dependencyVersions.dagger2"
    provided "org.glassfish:javax.annotation:$dependencyVersions.javaxAnnotation"

    // RxJava
    compile "io.reactivex.rxjava2:rxandroid:$dependencyVersions.rxAndroid"
    compile "io.reactivex.rxjava2:rxjava:$dependencyVersions.rxJava2"

    // IxJava
    compile "com.github.akarnokd:ixjava:$dependencyVersions.ixJava"

    // Networking
    compile "com.squareup.okhttp3:okhttp:$dependencyVersions.okHttp"
    compile "com.squareup.okhttp3:logging-interceptor:$dependencyVersions.okHttp"
    compile "com.squareup.picasso:picasso:$dependencyVersions.picasso"

    // Networking Retrofit
    compile "com.squareup.retrofit2:retrofit:$dependencyVersions.retrofit2"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$dependencyVersions.retrofit2RxJava2Adapter"
    compile "com.squareup.retrofit2:converter-gson:$dependencyVersions.retrofit2GsonConverter"

    // GSON
    compile "com.google.code.gson:gson:$dependencyVersions.gson"

    // Auto-Value
    provided "com.google.auto.value:auto-value:$dependencyVersions.autoValue"
    apt "com.google.auto.value:auto-value:$dependencyVersions.autoValue"

    // Auto-Value GSON
    apt "com.ryanharter.auto.value:auto-value-gson:$dependencyVersions.autoValueGson"
    provided "com.ryanharter.auto.value:auto-value-gson:$dependencyVersions.autoValueGson"

    // Auto-Value Parcelable
    compile "com.ryanharter.auto.value:auto-value-parcel-adapter:$dependencyVersions.autoValueParcelable"
    apt "com.ryanharter.auto.value:auto-value-parcel:$dependencyVersions.autoValueParcelable"

    // AutoFactory
    compile "com.google.auto.factory:auto-factory:$dependencyVersions.autoFactory"

    // Optionals for Java 6/7
    compile "com.github.tomaszpolanski:options:$dependencyVersions.options"

    // Audio player
    compile "com.google.android.exoplayer:exoplayer:$dependencyVersions.exoplayer"

    // Butter Knife
    compile "com.jakewharton:butterknife:$dependencyVersions.butterknife"
    apt "com.jakewharton:butterknife-compiler:$dependencyVersions.butterknife"

    // Timber
    compile "com.jakewharton.timber:timber:$dependencyVersions.timber"

    // Instrumentation
    compile "com.facebook.stetho:stetho:$dependencyVersions.stetho"
    compile "com.facebook.stetho:stetho-okhttp3:$dependencyVersions.stetho"
    debugCompile "com.readystatesoftware.chuck:library:$dependencyVersions.chuck"

    // Firebase
    compile "com.google.firebase:firebase-core:$dependencyVersions.firebase"
    compile "com.google.firebase:firebase-crash:$dependencyVersions.firebase"

    // Unit Testing
    testCompile "junit:junit:$dependencyVersions.junit"
    testCompile "org.mockito:mockito-core:$dependencyVersions.mockito"
    testCompile "org.assertj:assertj-core:$dependencyVersions.assertJ"
    testCompile "com.squareup.okhttp3:mockwebserver:$dependencyVersions.okHttp"

    // Leak Canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$dependencyVersions.leakCanary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$dependencyVersions.leakCanary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$dependencyVersions.leakCanary"

}

apply plugin: 'com.google.gms.google-services'
